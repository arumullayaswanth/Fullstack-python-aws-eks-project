// python project pipeline
pipeline {
    agent any 
    
    environment  {
        SCANNER_HOME= tool 'sonar-scanner'                // replace your sonarqube scanner name
        SONARQUBE_SERVER  = 'sonar-server'                // replace your Jenkins global SonarQube server name (Manage Jenkins > Configure System)
        SONAR_TOKEN_CRED  = 'sonarqube-token'            // Jenkins secret text credential id
        OWASP_CHECK = "DP-check"                         // replace name your Dependency-check installation 
        AWS_ACCOUNT_ID = '421954350274'                   // replace AWS account ID
        AWS_ECR_REPO_NAME = 'backend'                      //replace ECR repository name
        AWS_DEFAULT_REGION = 'us-east-1'                 // replace AWS region
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        GIT_REPO_NAME = "Fullstack-python-aws-eks-project"  // replace your github rep name
        GIT_EMAIL = "yaswanth.arumulla@gmail.com"            //replacr your github email id
        GIT_USER_NAME = "arumullayaswanth"                  // replace your user name
        YAML_FILE = "backend.yaml"

    }
    stages {
        // no change in this stage
        stage('Cleaning Workspace') {
            steps {
                cleanWs()         // Clears the workspace before starting the build (removes old files)
            }
        }

        // change rep name 
        stage('Checkout from Git') {
            steps {
                // Clones the 'master' branch of your GitHub repository
                git branch: 'master', url: 'https://github.com/arumullayaswanth/Fullstack-python-aws-eks-project.git'
            }
        }

        // no change in this stage
        stage("List Files") {
            steps {
                sh 'ls -la' // verfy files after checkout
            }
        }

        // no change in this stage Except dir name=dir('frontend')
        stage('Sonarqube Analysis') {
            steps {
                dir('backend') {
                    withSonarQubeEnv(env.SONARQUBE_SERVER) {
                        // change your prohect name my project name is frontend
                        sh ''' 
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=backend \
                        -Dsonar.projectKey=backend 
                        '''
                    }
                }
            }
        }

        // no change in this stage
        stage('Quality Check') {
            steps {
                script {
                    // This requires the "Quality Gates" webhook to be configured in SonarQube
                    waitForQualityGate abortPipeline: false, credentialsId: env.SONAR_TOKEN_CRED 
                }
            }
        }
        // no change in this stage Except dir name=dir('frontend')
        stage('Install Dependencies') {
            steps {
                dir('backend') {
                    sh '''
                    if [ -f requirements.txt ]; then
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                    else
                        echo "requirements.txt not found!"
                        exit 1
                    fi
                    '''
                }
            }
        }

        // this step it will take 45 
        // no change in this stage Except dir name=dir('frontend')
        stage('OWASP FS Scan') {
            steps {
                dir('backend') {   // Ensure you are scanning the right folder
                    dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit', odcInstallation: env.OWASP_CHECK
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        // no change in this stage
        stage('Trivy File Scan') {
            steps {
                dir('backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        // no change in this stage Except dir name=dir('frontend'
        stage("Docker Image Build") {
            steps {
                script {
                    dir('backend') {
                            sh 'docker system prune -f'              // Removes unused Docker data (containers, images, etc.)
                            sh 'docker container prune -f'           // Specifically removes all stopped containers
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'   // Builds Docker image with the tag 'frontend' from Dockerfile in current dir
                    }
                }
            }
        }

        // no change in this stage
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME}:latest ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }

        // no change in this stage
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        // change rep name
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/arumullayaswanth/Swiggy-GitOps-project.git'
            }
        }

        // no change in this stage Except dir name=dir('kubernetes-files')
        stage('Update Deployment file') {
            steps {

                dir('kubernetes-files') {
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh '''
                            git config user.email "${GIT_EMAIL}"
                            git config user.name "${GIT_USER_NAME}"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER

                            # push this image to your git hub
                            sed -i "s#image:.*#image: ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:$BUILD_NUMBER#g" ${YAML_FILE}
                            git add .
                            git commit -m "Update ${AWS_ECR_REPO_NAME} Image to version \${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
        
                        '''
                    }
                }
            }
        }
    }

    // no change in this stage Except your email id:yaswanth.arumulla@gmail.com
    post {
        always {
            emailext attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                       "Build Number: ${env.BUILD_NUMBER}<br/>" +
                        "URL: ${env.BUILD_URL}<br/>",
                to: 'yaswanth.arumulla@gmail.com',
                attachmentsPattern: 'trivyfs.txt,trivyimage.txt,**/dependency-check-report.xml'
           }
      }
}
